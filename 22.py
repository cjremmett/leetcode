from typing import List

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        self.previous_sets = set()
        self.return_set = set()
        self.return_set.add('()')
        for i in range(2, n + 1):
            self.iterate_parenthesis(i)
        return self.return_set

    def iterate_parenthesis(self, count):
        self.previous_sets = self.previous_sets.union(self.return_set)
        self.return_set.clear()
        for result in self.previous_sets:
            for match in self.previous_sets:
                if len(match) + len(result) == count * 2:
                    self.return_set.add(match + result)
                    self.return_set.add(result + match)

        for result in self.previous_sets:
            if len(result) == (count * 2) - 2:
                self.return_set.add('(' + result + ')')
        

if __name__ == '__main__':
    # result = '()'
    # left_stack = []
    # right_stack = []
    # for i in range(0, len(result)):
    #             if result[i] == '(':
    #                 left_stack.append(i)
    #             else:
    #                 right_stack.append(i)
    # result_to_add = result[0:left_stack[0]] + '(' + result[left_stack[0]:right_stack[0]] + ')' + result[right_stack[0]:]
    # print(result_to_add)
    test_cases
    for case in test_cases:
        print('Input: ' + str(case[0]) + '\nExpected Output: ' + str(case[1]) + '\nActual Output: ' + str(Solution().generateParenthesis(case[0])) + '\n')
        print('Dif ' + str(set(case[1]) - Solution().generateParenthesis(case[0])) + '\n')